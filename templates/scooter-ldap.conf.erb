directories {
    users { 
        url = "<%= @ldap_server %>"
        base = "<%= @ldap_search_base %>"
        userDn = '<%= @ldap_manager_dn %>'
        password = "<%= @ldap_manager_password %>" 
        searchControls { 
            countLimit = 40 
            timeLimit = 600 
            searchScope = "subtree" 
      }
    }
    groups { 
          url = "<%= @ldap_server %>"
          base = "<%= @ldap_group_search_base %>"
          userDn = '<%= @ldap_manager_dn %>'
          password = "<%= @ldap_manager_password %>" 
        searchControls { 
              countLimit = 40 
              timeLimit = 600 
              searchScope = "subtree" 
        }
    }
}
schemas = [ 
  com.airgap.scooter.ldap.User,
  com.airgap.scooter.ldap.Group
]


grails.plugins.springsecurity.ldap.context.managerDn = '<%= @ldap_manager_dn %>'
grails.plugins.springsecurity.ldap.context.managerPassword = '<%= @ldap_manager_password %>'
grails.plugins.springsecurity.ldap.context.server = '<%= @ldap_server %>'

grails.plugins.springsecurity.ldap.authorities.groupSearchBase = '<%= @ldap_group_search_base %>'
grails.plugins.springsecurity.ldap.authorities.retrieveGroupRoles = true
grails.plugins.springsecurity.ldap.authorities.retrieveDatabaseRoles = false
grails.plugins.springsecurity.ldap.authorities.groupSearchFilter = '<%= @ldap_group_search_filter %>'

grails.plugins.springsecurity.ldap.search.base = '<%= @ldap_search_base %>'
grails.plugins.springsecurity.providerNames = ['ldapAuthProvider','anonymousAuthenticationProvider']

grails.plugins.springsecurity.securityConfigType = grails.plugins.springsecurity.SecurityConfigType.InterceptUrlMap
grails.plugins.springsecurity.interceptUrlMap = [
        '/login/**':    ['IS_AUTHENTICATED_ANONYMOUSLY'],
        '/**':          ['ROLE_ADMINS','ROLE_USERS','IS_AUTHENTICATED_FULLY']
]